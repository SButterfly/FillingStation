//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using FillingStation.Properties;

namespace FillingStation.Assets
{
#pragma warning disable 1591

    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [Serializable()]
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [XmlSchemaProvider("GetTypedDataSetSchema")]
    [XmlRoot("FillingStation_DBDataSet")]
    [HelpKeyword("vs.data.DataSet")]
    public partial class FillingStation_DBDataSet : DataSet {
        
        private Car_ModelDataTable tableCar_Model;
        
        private Car_TypeDataTable tableCar_Type;
        
        private Fuel_TypeDataTable tableFuel_Type;
        
        private DataRelation relationCar_TypeCar_Model;
        
        private DataRelation relationFuel_TypeCar_Model;
        
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public FillingStation_DBDataSet() {
            this.BeginInit();
            this.InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected FillingStation_DBDataSet(SerializationInfo info, StreamingContext context) : 
            base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                CollectionChangeEventHandler schemaChangedHandler1 = new CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Car_Model"] != null)) {
                    base.Tables.Add(new Car_ModelDataTable(ds.Tables["Car_Model"]));
                }
                if ((ds.Tables["Car_Type"] != null)) {
                    base.Tables.Add(new Car_TypeDataTable(ds.Tables["Car_Type"]));
                }
                if ((ds.Tables["Fuel_Type"] != null)) {
                    base.Tables.Add(new Fuel_TypeDataTable(ds.Tables["Fuel_Type"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
            }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Car_ModelDataTable Car_Model {
            get {
                return this.tableCar_Model;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Car_TypeDataTable Car_Type {
            get {
                return this.tableCar_Type;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public Fuel_TypeDataTable Fuel_Type {
            get {
                return this.tableFuel_Type;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone() {
            FillingStation_DBDataSet cln = ((FillingStation_DBDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                DataSet ds = new DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Car_Model"] != null)) {
                    base.Tables.Add(new Car_ModelDataTable(ds.Tables["Car_Model"]));
                }
                if ((ds.Tables["Car_Type"] != null)) {
                    base.Tables.Add(new Car_TypeDataTable(ds.Tables["Car_Type"]));
                }
                if ((ds.Tables["Fuel_Type"] != null)) {
                    base.Tables.Add(new Fuel_TypeDataTable(ds.Tables["Fuel_Type"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableCar_Model = ((Car_ModelDataTable)(base.Tables["Car_Model"]));
            if ((initTable == true)) {
                if ((this.tableCar_Model != null)) {
                    this.tableCar_Model.InitVars();
                }
            }
            this.tableCar_Type = ((Car_TypeDataTable)(base.Tables["Car_Type"]));
            if ((initTable == true)) {
                if ((this.tableCar_Type != null)) {
                    this.tableCar_Type.InitVars();
                }
            }
            this.tableFuel_Type = ((Fuel_TypeDataTable)(base.Tables["Fuel_Type"]));
            if ((initTable == true)) {
                if ((this.tableFuel_Type != null)) {
                    this.tableFuel_Type.InitVars();
                }
            }
            this.relationCar_TypeCar_Model = this.Relations["Car_TypeCar_Model"];
            this.relationFuel_TypeCar_Model = this.Relations["Fuel_TypeCar_Model"];
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "FillingStation_DBDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FillingStation_DBDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            this.tableCar_Model = new Car_ModelDataTable();
            base.Tables.Add(this.tableCar_Model);
            this.tableCar_Type = new Car_TypeDataTable();
            base.Tables.Add(this.tableCar_Type);
            this.tableFuel_Type = new Fuel_TypeDataTable();
            base.Tables.Add(this.tableFuel_Type);
            this.relationCar_TypeCar_Model = new DataRelation("Car_TypeCar_Model", new DataColumn[] {
                this.tableCar_Type.car_type_idColumn}, new DataColumn[] {
                    this.tableCar_Model.car_type_idColumn}, false);
            this.Relations.Add(this.relationCar_TypeCar_Model);
            this.relationFuel_TypeCar_Model = new DataRelation("Fuel_TypeCar_Model", new DataColumn[] {
                this.tableFuel_Type.fuel_type_idColumn}, new DataColumn[] {
                    this.tableCar_Model.fuel_type_idColumn}, false);
            this.Relations.Add(this.relationFuel_TypeCar_Model);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCar_Model() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCar_Type() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFuel_Type() {
            return false;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static XmlSchemaComplexType GetTypedDataSetSchema(XmlSchemaSet xs) {
            FillingStation_DBDataSet ds = new FillingStation_DBDataSet();
            XmlSchemaComplexType type = new XmlSchemaComplexType();
            XmlSchemaSequence sequence = new XmlSchemaSequence();
            XmlSchemaAny any = new XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                MemoryStream s1 = new MemoryStream();
                MemoryStream s2 = new MemoryStream();
                try {
                    XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                                        ;
                                    }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Car_ModelRowChangeEventHandler(object sender, Car_ModelRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Car_TypeRowChangeEventHandler(object sender, Car_TypeRowChangeEvent e);
        
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Fuel_TypeRowChangeEventHandler(object sender, Fuel_TypeRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Car_ModelDataTable : TypedTableBase<Car_ModelRow> {
            
            private DataColumn columncar_model_id;
            
            private DataColumn columncar_model_name;
            
            private DataColumn columnimage_path;
            
            private DataColumn columntank_volume;
            
            private DataColumn columncar_type_id;
            
            private DataColumn columnfuel_type_id;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelDataTable() {
                this.TableName = "Car_Model";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Car_ModelDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Car_ModelDataTable(SerializationInfo info, StreamingContext context) : 
                base(info, context) {
                this.InitVars();
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn car_model_idColumn {
                get {
                    return this.columncar_model_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn car_model_nameColumn {
                get {
                    return this.columncar_model_name;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn image_pathColumn {
                get {
                    return this.columnimage_path;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn tank_volumeColumn {
                get {
                    return this.columntank_volume;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn car_type_idColumn {
                get {
                    return this.columncar_type_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn fuel_type_idColumn {
                get {
                    return this.columnfuel_type_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow this[int index] {
                get {
                    return ((Car_ModelRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_ModelRowChangeEventHandler Car_ModelRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_ModelRowChangeEventHandler Car_ModelRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_ModelRowChangeEventHandler Car_ModelRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_ModelRowChangeEventHandler Car_ModelRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCar_ModelRow(Car_ModelRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow AddCar_ModelRow(short car_model_id, string car_model_name, string image_path, decimal tank_volume, Car_TypeRow parentCar_TypeRowByCar_TypeCar_Model, Fuel_TypeRow parentFuel_TypeRowByFuel_TypeCar_Model) {
                Car_ModelRow rowCar_ModelRow = ((Car_ModelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    car_model_id,
                    car_model_name,
                    image_path,
                    tank_volume,
                    null,
                    null};
                if ((parentCar_TypeRowByCar_TypeCar_Model != null)) {
                    columnValuesArray[4] = parentCar_TypeRowByCar_TypeCar_Model[0];
                }
                if ((parentFuel_TypeRowByFuel_TypeCar_Model != null)) {
                    columnValuesArray[5] = parentFuel_TypeRowByFuel_TypeCar_Model[0];
                }
                rowCar_ModelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCar_ModelRow);
                return rowCar_ModelRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow FindBycar_model_id(short car_model_id) {
                return ((Car_ModelRow)(this.Rows.Find(new object[] {
                    car_model_id})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                Car_ModelDataTable cln = ((Car_ModelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new Car_ModelDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columncar_model_id = base.Columns["car_model_id"];
                this.columncar_model_name = base.Columns["car_model_name"];
                this.columnimage_path = base.Columns["image_path"];
                this.columntank_volume = base.Columns["tank_volume"];
                this.columncar_type_id = base.Columns["car_type_id"];
                this.columnfuel_type_id = base.Columns["fuel_type_id"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columncar_model_id = new DataColumn("car_model_id", typeof(short), null, MappingType.Element);
                base.Columns.Add(this.columncar_model_id);
                this.columncar_model_name = new DataColumn("car_model_name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columncar_model_name);
                this.columnimage_path = new DataColumn("image_path", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnimage_path);
                this.columntank_volume = new DataColumn("tank_volume", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columntank_volume);
                this.columncar_type_id = new DataColumn("car_type_id", typeof(short), null, MappingType.Element);
                base.Columns.Add(this.columncar_type_id);
                this.columnfuel_type_id = new DataColumn("fuel_type_id", typeof(short), null, MappingType.Element);
                base.Columns.Add(this.columnfuel_type_id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                    this.columncar_model_id}, true));
                this.columncar_model_id.AllowDBNull = false;
                this.columncar_model_id.Unique = true;
                this.columncar_model_name.MaxLength = 60;
                this.columnimage_path.MaxLength = 150;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow NewCar_ModelRow() {
                return ((Car_ModelRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Car_ModelRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(Car_ModelRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Car_ModelRowChanged != null)) {
                    this.Car_ModelRowChanged(this, new Car_ModelRowChangeEvent(((Car_ModelRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Car_ModelRowChanging != null)) {
                    this.Car_ModelRowChanging(this, new Car_ModelRowChangeEvent(((Car_ModelRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Car_ModelRowDeleted != null)) {
                    this.Car_ModelRowDeleted(this, new Car_ModelRowChangeEvent(((Car_ModelRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Car_ModelRowDeleting != null)) {
                    this.Car_ModelRowDeleting(this, new Car_ModelRowChangeEvent(((Car_ModelRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCar_ModelRow(Car_ModelRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                FillingStation_DBDataSet ds = new FillingStation_DBDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Car_ModelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                            ;
                                        }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Car_TypeDataTable : TypedTableBase<Car_TypeRow> {
            
            private DataColumn columncar_type_id;
            
            private DataColumn columncar_type_name;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeDataTable() {
                this.TableName = "Car_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Car_TypeDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Car_TypeDataTable(SerializationInfo info, StreamingContext context) : 
                base(info, context) {
                this.InitVars();
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn car_type_idColumn {
                get {
                    return this.columncar_type_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn car_type_nameColumn {
                get {
                    return this.columncar_type_name;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow this[int index] {
                get {
                    return ((Car_TypeRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_TypeRowChangeEventHandler Car_TypeRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_TypeRowChangeEventHandler Car_TypeRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_TypeRowChangeEventHandler Car_TypeRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Car_TypeRowChangeEventHandler Car_TypeRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddCar_TypeRow(Car_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow AddCar_TypeRow(short car_type_id, string car_type_name) {
                Car_TypeRow rowCar_TypeRow = ((Car_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    car_type_id,
                    car_type_name};
                rowCar_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCar_TypeRow);
                return rowCar_TypeRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow FindBycar_type_id(short car_type_id) {
                return ((Car_TypeRow)(this.Rows.Find(new object[] {
                    car_type_id})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                Car_TypeDataTable cln = ((Car_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new Car_TypeDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columncar_type_id = base.Columns["car_type_id"];
                this.columncar_type_name = base.Columns["car_type_name"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columncar_type_id = new DataColumn("car_type_id", typeof(short), null, MappingType.Element);
                base.Columns.Add(this.columncar_type_id);
                this.columncar_type_name = new DataColumn("car_type_name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columncar_type_name);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                    this.columncar_type_id}, true));
                this.columncar_type_id.AllowDBNull = false;
                this.columncar_type_id.Unique = true;
                this.columncar_type_name.MaxLength = 20;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow NewCar_TypeRow() {
                return ((Car_TypeRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Car_TypeRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(Car_TypeRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Car_TypeRowChanged != null)) {
                    this.Car_TypeRowChanged(this, new Car_TypeRowChangeEvent(((Car_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Car_TypeRowChanging != null)) {
                    this.Car_TypeRowChanging(this, new Car_TypeRowChangeEvent(((Car_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Car_TypeRowDeleted != null)) {
                    this.Car_TypeRowDeleted(this, new Car_TypeRowChangeEvent(((Car_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Car_TypeRowDeleting != null)) {
                    this.Car_TypeRowDeleting(this, new Car_TypeRowChangeEvent(((Car_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveCar_TypeRow(Car_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                FillingStation_DBDataSet ds = new FillingStation_DBDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Car_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                            ;
                                        }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [Serializable()]
        [XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Fuel_TypeDataTable : TypedTableBase<Fuel_TypeRow> {
            
            private DataColumn columnfuel_type_id;
            
            private DataColumn columnfuel_type_name;
            
            private DataColumn columnprice;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeDataTable() {
                this.TableName = "Fuel_Type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Fuel_TypeDataTable(DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Fuel_TypeDataTable(SerializationInfo info, StreamingContext context) : 
                base(info, context) {
                this.InitVars();
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn fuel_type_idColumn {
                get {
                    return this.columnfuel_type_id;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn fuel_type_nameColumn {
                get {
                    return this.columnfuel_type_name;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn priceColumn {
                get {
                    return this.columnprice;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow this[int index] {
                get {
                    return ((Fuel_TypeRow)(this.Rows[index]));
                }
            }
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Fuel_TypeRowChangeEventHandler Fuel_TypeRowChanging;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Fuel_TypeRowChangeEventHandler Fuel_TypeRowChanged;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Fuel_TypeRowChangeEventHandler Fuel_TypeRowDeleting;
            
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Fuel_TypeRowChangeEventHandler Fuel_TypeRowDeleted;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFuel_TypeRow(Fuel_TypeRow row) {
                this.Rows.Add(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow AddFuel_TypeRow(short fuel_type_id, string fuel_type_name, decimal price) {
                Fuel_TypeRow rowFuel_TypeRow = ((Fuel_TypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                    fuel_type_id,
                    fuel_type_name,
                    price};
                rowFuel_TypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFuel_TypeRow);
                return rowFuel_TypeRow;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow FindByfuel_type_id(short fuel_type_id) {
                return ((Fuel_TypeRow)(this.Rows.Find(new object[] {
                    fuel_type_id})));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone() {
                Fuel_TypeDataTable cln = ((Fuel_TypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance() {
                return new Fuel_TypeDataTable();
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnfuel_type_id = base.Columns["fuel_type_id"];
                this.columnfuel_type_name = base.Columns["fuel_type_name"];
                this.columnprice = base.Columns["price"];
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnfuel_type_id = new DataColumn("fuel_type_id", typeof(short), null, MappingType.Element);
                base.Columns.Add(this.columnfuel_type_id);
                this.columnfuel_type_name = new DataColumn("fuel_type_name", typeof(string), null, MappingType.Element);
                base.Columns.Add(this.columnfuel_type_name);
                this.columnprice = new DataColumn("price", typeof(decimal), null, MappingType.Element);
                base.Columns.Add(this.columnprice);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                    this.columnfuel_type_id}, true));
                this.columnfuel_type_id.AllowDBNull = false;
                this.columnfuel_type_id.Unique = true;
                this.columnfuel_type_name.MaxLength = 20;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow NewFuel_TypeRow() {
                return ((Fuel_TypeRow)(this.NewRow()));
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Fuel_TypeRow(builder);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType() {
                return typeof(Fuel_TypeRow);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Fuel_TypeRowChanged != null)) {
                    this.Fuel_TypeRowChanged(this, new Fuel_TypeRowChangeEvent(((Fuel_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Fuel_TypeRowChanging != null)) {
                    this.Fuel_TypeRowChanging(this, new Fuel_TypeRowChangeEvent(((Fuel_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Fuel_TypeRowDeleted != null)) {
                    this.Fuel_TypeRowDeleted(this, new Fuel_TypeRowChangeEvent(((Fuel_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Fuel_TypeRowDeleting != null)) {
                    this.Fuel_TypeRowDeleting(this, new Fuel_TypeRowChangeEvent(((Fuel_TypeRow)(e.Row)), e.Action));
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFuel_TypeRow(Fuel_TypeRow row) {
                this.Rows.Remove(row);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static XmlSchemaComplexType GetTypedTableSchema(XmlSchemaSet xs) {
                XmlSchemaComplexType type = new XmlSchemaComplexType();
                XmlSchemaSequence sequence = new XmlSchemaSequence();
                FillingStation_DBDataSet ds = new FillingStation_DBDataSet();
                XmlSchemaAny any1 = new XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                XmlSchemaAny any2 = new XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                XmlSchemaAttribute attribute1 = new XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                XmlSchemaAttribute attribute2 = new XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Fuel_TypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    MemoryStream s1 = new MemoryStream();
                    MemoryStream s2 = new MemoryStream();
                    try {
                        XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                            ;
                                        }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Car_ModelRow : DataRow {
            
            private Car_ModelDataTable tableCar_Model;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Car_ModelRow(DataRowBuilder rb) : 
                base(rb) {
                this.tableCar_Model = ((Car_ModelDataTable)(this.Table));
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short car_model_id {
                get {
                    return ((short)(this[this.tableCar_Model.car_model_idColumn]));
                }
                set {
                    this[this.tableCar_Model.car_model_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string car_model_name {
                get {
                    try {
                        return ((string)(this[this.tableCar_Model.car_model_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'car_model_name\' в таблице \'Car_Model\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Model.car_model_nameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string image_path {
                get {
                    try {
                        return ((string)(this[this.tableCar_Model.image_pathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'image_path\' в таблице \'Car_Model\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Model.image_pathColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal tank_volume {
                get {
                    try {
                        return ((decimal)(this[this.tableCar_Model.tank_volumeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'tank_volume\' в таблице \'Car_Model\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Model.tank_volumeColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short car_type_id {
                get {
                    try {
                        return ((short)(this[this.tableCar_Model.car_type_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'car_type_id\' в таблице \'Car_Model\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Model.car_type_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short fuel_type_id {
                get {
                    try {
                        return ((short)(this[this.tableCar_Model.fuel_type_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'fuel_type_id\' в таблице \'Car_Model\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Model.fuel_type_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow Car_TypeRow {
                get {
                    return ((Car_TypeRow)(this.GetParentRow(this.Table.ParentRelations["Car_TypeCar_Model"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Car_TypeCar_Model"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow Fuel_TypeRow {
                get {
                    return ((Fuel_TypeRow)(this.GetParentRow(this.Table.ParentRelations["Fuel_TypeCar_Model"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Fuel_TypeCar_Model"]);
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Iscar_model_nameNull() {
                return this.IsNull(this.tableCar_Model.car_model_nameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setcar_model_nameNull() {
                this[this.tableCar_Model.car_model_nameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isimage_pathNull() {
                return this.IsNull(this.tableCar_Model.image_pathColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setimage_pathNull() {
                this[this.tableCar_Model.image_pathColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Istank_volumeNull() {
                return this.IsNull(this.tableCar_Model.tank_volumeColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Settank_volumeNull() {
                this[this.tableCar_Model.tank_volumeColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Iscar_type_idNull() {
                return this.IsNull(this.tableCar_Model.car_type_idColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setcar_type_idNull() {
                this[this.tableCar_Model.car_type_idColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isfuel_type_idNull() {
                return this.IsNull(this.tableCar_Model.fuel_type_idColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setfuel_type_idNull() {
                this[this.tableCar_Model.fuel_type_idColumn] = Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Car_TypeRow : DataRow {
            
            private Car_TypeDataTable tableCar_Type;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Car_TypeRow(DataRowBuilder rb) : 
                base(rb) {
                this.tableCar_Type = ((Car_TypeDataTable)(this.Table));
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short car_type_id {
                get {
                    return ((short)(this[this.tableCar_Type.car_type_idColumn]));
                }
                set {
                    this[this.tableCar_Type.car_type_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string car_type_name {
                get {
                    try {
                        return ((string)(this[this.tableCar_Type.car_type_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'car_type_name\' в таблице \'Car_Type\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableCar_Type.car_type_nameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Iscar_type_nameNull() {
                return this.IsNull(this.tableCar_Type.car_type_nameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setcar_type_nameNull() {
                this[this.tableCar_Type.car_type_nameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow[] GetCar_ModelRows() {
                if ((this.Table.ChildRelations["Car_TypeCar_Model"] == null)) {
                    return new Car_ModelRow[0];
                }
                else {
                    return ((Car_ModelRow[])(base.GetChildRows(this.Table.ChildRelations["Car_TypeCar_Model"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Fuel_TypeRow : DataRow {
            
            private Fuel_TypeDataTable tableFuel_Type;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Fuel_TypeRow(DataRowBuilder rb) : 
                base(rb) {
                this.tableFuel_Type = ((Fuel_TypeDataTable)(this.Table));
                }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public short fuel_type_id {
                get {
                    return ((short)(this[this.tableFuel_Type.fuel_type_idColumn]));
                }
                set {
                    this[this.tableFuel_Type.fuel_type_idColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string fuel_type_name {
                get {
                    try {
                        return ((string)(this[this.tableFuel_Type.fuel_type_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'fuel_type_name\' в таблице \'Fuel_Type\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuel_Type.fuel_type_nameColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal price {
                get {
                    try {
                        return ((decimal)(this[this.tableFuel_Type.priceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Значение для столбца \'price\' в таблице \'Fuel_Type\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableFuel_Type.priceColumn] = value;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Isfuel_type_nameNull() {
                return this.IsNull(this.tableFuel_Type.fuel_type_nameColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void Setfuel_type_nameNull() {
                this[this.tableFuel_Type.fuel_type_nameColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IspriceNull() {
                return this.IsNull(this.tableFuel_Type.priceColumn);
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetpriceNull() {
                this[this.tableFuel_Type.priceColumn] = Convert.DBNull;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow[] GetCar_ModelRows() {
                if ((this.Table.ChildRelations["Fuel_TypeCar_Model"] == null)) {
                    return new Car_ModelRow[0];
                }
                else {
                    return ((Car_ModelRow[])(base.GetChildRows(this.Table.ChildRelations["Fuel_TypeCar_Model"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Car_ModelRowChangeEvent : EventArgs {
            
            private Car_ModelRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRowChangeEvent(Car_ModelRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_ModelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Car_TypeRowChangeEvent : EventArgs {
            
            private Car_TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRowChangeEvent(Car_TypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Car_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Fuel_TypeRowChangeEvent : EventArgs {
            
            private Fuel_TypeRow eventRow;
            
            private DataRowAction eventAction;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRowChangeEvent(Fuel_TypeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Fuel_TypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }

    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
                                                     ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class Car_ModelTableAdapter : Component {
        
        private OleDbDataAdapter _adapter;
        
        private OleDbConnection _connection;
        
        private OleDbTransaction _transaction;
        
        private OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Car_ModelTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                     && (this.Adapter.DeleteCommand != null))) {
                         this.Adapter.DeleteCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.InsertCommand != null))) {
                         this.Adapter.InsertCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.UpdateCommand != null))) {
                         this.Adapter.UpdateCommand.Transaction = this._transaction;
                     }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new OleDbDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Car_Model";
            tableMapping.ColumnMappings.Add("car_model_id", "car_model_id");
            tableMapping.ColumnMappings.Add("car_model_name", "car_model_name");
            tableMapping.ColumnMappings.Add("image_path", "image_path");
            tableMapping.ColumnMappings.Add("tank_volume", "tank_volume");
            tableMapping.ColumnMappings.Add("car_type_id", "car_type_id");
            tableMapping.ColumnMappings.Add("fuel_type_id", "fuel_type_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `Car_Model` WHERE ((`car_model_id` = ?) AND ((? = 1 AND `car_model_name` IS NULL) OR (`car_model_name` = ?)) AND ((? = 1 AND `image_path` IS NULL) OR (`image_path` = ?)) AND ((? = 1 AND `tank_volume` IS NULL) OR (`tank_volume` = ?)) AND ((? = 1 AND `car_type_id` IS NULL) OR (`car_type_id` = ?)) AND ((? = 1 AND `fuel_type_id` IS NULL) OR (`fuel_type_id` = ?)))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_car_model_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_id", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_car_model_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_car_model_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_image_path", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_image_path", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_tank_volume", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tank_volume", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_tank_volume", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "tank_volume", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_car_type_id", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_fuel_type_id", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Car_Model` (`car_model_id`, `car_model_name`, `image_path`, `tank_vo" +
                                                      "lume`, `car_type_id`, `fuel_type_id`) VALUES (?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("car_model_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_id", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("car_model_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("image_path", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("tank_volume", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "tank_volume", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `Car_Model` SET `car_model_id` = ?, `car_model_name` = ?, `image_path` = ?, `tank_volume` = ?, `car_type_id` = ?, `fuel_type_id` = ? WHERE ((`car_model_id` = ?) AND ((? = 1 AND `car_model_name` IS NULL) OR (`car_model_name` = ?)) AND ((? = 1 AND `image_path` IS NULL) OR (`image_path` = ?)) AND ((? = 1 AND `tank_volume` IS NULL) OR (`tank_volume` = ?)) AND ((? = 1 AND `car_type_id` IS NULL) OR (`car_type_id` = ?)) AND ((? = 1 AND `fuel_type_id` IS NULL) OR (`fuel_type_id` = ?)))";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("car_model_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("car_model_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("image_path", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("tank_volume", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "tank_volume", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_car_model_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_id", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_car_model_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_car_model_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_model_name", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_image_path", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_image_path", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "image_path", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_tank_volume", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "tank_volume", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_tank_volume", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "tank_volume", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_car_type_id", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_fuel_type_id", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, false, null));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new OleDbConnection();
            this._connection.ConnectionString = Settings.Default.FillingStation_DBConnectionString;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new OleDbCommand[1];
            this._commandCollection[0] = new OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT car_model_id, car_model_name, image_path, tank_volume, car_type_id, fuel_t" +
                                                     "ype_id FROM Car_Model";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(FillingStation_DBDataSet.Car_ModelDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual FillingStation_DBDataSet.Car_ModelDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FillingStation_DBDataSet.Car_ModelDataTable dataTable = new FillingStation_DBDataSet.Car_ModelDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet.Car_ModelDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Car_Model");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_car_model_id, string Original_car_model_name, string Original_image_path, decimal Original_tank_volume, short Original_car_type_id, short Original_fuel_type_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_car_model_id));
            if ((Original_car_model_name == null)) {
                throw new ArgumentNullException("Original_car_model_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_car_model_name));
            }
            if ((Original_image_path == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_image_path));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_tank_volume));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((short)(Original_car_type_id));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((short)(Original_fuel_type_id));
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.DeleteCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(short car_model_id, string car_model_name, string image_path, decimal tank_volume, short car_type_id, short fuel_type_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((short)(car_model_id));
            if ((car_model_name == null)) {
                throw new ArgumentNullException("car_model_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(car_model_name));
            }
            if ((image_path == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(image_path));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(tank_volume));
            this.Adapter.InsertCommand.Parameters[4].Value = ((short)(car_type_id));
            this.Adapter.InsertCommand.Parameters[5].Value = ((short)(fuel_type_id));
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.InsertCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(short car_model_id, string car_model_name, string image_path, decimal tank_volume, short car_type_id, short fuel_type_id, short Original_car_model_id, string Original_car_model_name, string Original_image_path, decimal Original_tank_volume, short Original_car_type_id, short Original_fuel_type_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((short)(car_model_id));
            if ((car_model_name == null)) {
                throw new ArgumentNullException("car_model_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(car_model_name));
            }
            if ((image_path == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(image_path));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(tank_volume));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((short)(car_type_id));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((short)(fuel_type_id));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(Original_car_model_id));
            if ((Original_car_model_name == null)) {
                throw new ArgumentNullException("Original_car_model_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_car_model_name));
            }
            if ((Original_image_path == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_image_path));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_tank_volume));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((short)(Original_car_type_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(Original_fuel_type_id));
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.UpdateCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string car_model_name, string image_path, decimal tank_volume, short car_type_id, short fuel_type_id, short Original_car_model_id, string Original_car_model_name, string Original_image_path, decimal Original_tank_volume, short Original_car_type_id, short Original_fuel_type_id) {
            return this.Update(Original_car_model_id, car_model_name, image_path, tank_volume, car_type_id, fuel_type_id, Original_car_model_id, Original_car_model_name, Original_image_path, Original_tank_volume, Original_car_type_id, Original_fuel_type_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
                                                     ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class Car_TypeTableAdapter : Component {
        
        private OleDbDataAdapter _adapter;
        
        private OleDbConnection _connection;
        
        private OleDbTransaction _transaction;
        
        private OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Car_TypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                     && (this.Adapter.DeleteCommand != null))) {
                         this.Adapter.DeleteCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.InsertCommand != null))) {
                         this.Adapter.InsertCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.UpdateCommand != null))) {
                         this.Adapter.UpdateCommand.Transaction = this._transaction;
                     }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new OleDbDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Car_Type";
            tableMapping.ColumnMappings.Add("car_type_id", "car_type_id");
            tableMapping.ColumnMappings.Add("car_type_name", "car_type_name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `Car_Type` WHERE ((`car_type_id` = ?) AND ((? = 1 AND `car_type_name`" +
                                                      " IS NULL) OR (`car_type_name` = ?)))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_car_type_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_car_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Car_Type` (`car_type_id`, `car_type_name`) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("car_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `Car_Type` SET `car_type_id` = ?, `car_type_name` = ? WHERE ((`car_type_id" +
                                                      "` = ?) AND ((? = 1 AND `car_type_name` IS NULL) OR (`car_type_name` = ?)))";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("car_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_car_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_id", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_car_type_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_car_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "car_type_name", DataRowVersion.Original, false, null));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new OleDbConnection();
            this._connection.ConnectionString = Settings.Default.FillingStation_DBConnectionString;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new OleDbCommand[1];
            this._commandCollection[0] = new OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT car_type_id, car_type_name FROM Car_Type";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(FillingStation_DBDataSet.Car_TypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual FillingStation_DBDataSet.Car_TypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FillingStation_DBDataSet.Car_TypeDataTable dataTable = new FillingStation_DBDataSet.Car_TypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet.Car_TypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Car_Type");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_car_type_id, string Original_car_type_name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_car_type_id));
            if ((Original_car_type_name == null)) {
                throw new ArgumentNullException("Original_car_type_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_car_type_name));
            }
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.DeleteCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(short car_type_id, string car_type_name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((short)(car_type_id));
            if ((car_type_name == null)) {
                throw new ArgumentNullException("car_type_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(car_type_name));
            }
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.InsertCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(short car_type_id, string car_type_name, short Original_car_type_id, string Original_car_type_name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((short)(car_type_id));
            if ((car_type_name == null)) {
                throw new ArgumentNullException("car_type_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(car_type_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(Original_car_type_id));
            if ((Original_car_type_name == null)) {
                throw new ArgumentNullException("Original_car_type_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_car_type_name));
            }
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.UpdateCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string car_type_name, short Original_car_type_id, string Original_car_type_name) {
            return this.Update(Original_car_type_id, car_type_name, Original_car_type_id, Original_car_type_name);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [DataObject(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
                                                     ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapter")]
    public partial class Fuel_TypeTableAdapter : Component {
        
        private OleDbDataAdapter _adapter;
        
        private OleDbConnection _connection;
        
        private OleDbTransaction _transaction;
        
        private OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Fuel_TypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                     && (this.Adapter.DeleteCommand != null))) {
                         this.Adapter.DeleteCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.InsertCommand != null))) {
                         this.Adapter.InsertCommand.Transaction = this._transaction;
                     }
                if (((this.Adapter != null) 
                     && (this.Adapter.UpdateCommand != null))) {
                         this.Adapter.UpdateCommand.Transaction = this._transaction;
                     }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new OleDbDataAdapter();
            DataTableMapping tableMapping = new DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Fuel_Type";
            tableMapping.ColumnMappings.Add("fuel_type_id", "fuel_type_id");
            tableMapping.ColumnMappings.Add("fuel_type_name", "fuel_type_name");
            tableMapping.ColumnMappings.Add("price", "price");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `Fuel_Type` WHERE ((`fuel_type_id` = ?) AND ((? = 1 AND `fuel_type_na" +
                                                      "me` IS NULL) OR (`fuel_type_name` = ?)) AND ((? = 1 AND `price` IS NULL) OR (`pr" +
                                                      "ice` = ?)))";
            this._adapter.DeleteCommand.CommandType = CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_fuel_type_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("IsNull_price", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "price", DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new OleDbParameter("Original_price", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "price", DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `Fuel_Type` (`fuel_type_id`, `fuel_type_name`, `price`) VALUES (?, ?," +
                                                      " ?)";
            this._adapter.InsertCommand.CommandType = CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("fuel_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new OleDbParameter("price", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "price", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `Fuel_Type` SET `fuel_type_id` = ?, `fuel_type_name` = ?, `price` = ? WHER" +
                                                      "E ((`fuel_type_id` = ?) AND ((? = 1 AND `fuel_type_name` IS NULL) OR (`fuel_type" +
                                                      "_name` = ?)) AND ((? = 1 AND `price` IS NULL) OR (`price` = ?)))";
            this._adapter.UpdateCommand.CommandType = CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("fuel_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("price", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "price", DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_id", OleDbType.SmallInt, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_id", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_fuel_type_name", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_fuel_type_name", OleDbType.VarWChar, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "fuel_type_name", DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("IsNull_price", OleDbType.Integer, 0, ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "price", DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new OleDbParameter("Original_price", OleDbType.Numeric, 0, ParameterDirection.Input, ((byte)(18)), ((byte)(2)), "price", DataRowVersion.Original, false, null));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new OleDbConnection();
            this._connection.ConnectionString = Settings.Default.FillingStation_DBConnectionString;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new OleDbCommand[1];
            this._commandCollection[0] = new OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT fuel_type_id, fuel_type_name, price FROM Fuel_Type";
            this._commandCollection[0].CommandType = CommandType.Text;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Fill, true)]
        public virtual int Fill(FillingStation_DBDataSet.Fuel_TypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public virtual FillingStation_DBDataSet.Fuel_TypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            FillingStation_DBDataSet.Fuel_TypeDataTable dataTable = new FillingStation_DBDataSet.Fuel_TypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet.Fuel_TypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(FillingStation_DBDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Fuel_Type");
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow dataRow) {
            return this.Adapter.Update(new DataRow[] {
                dataRow});
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        public virtual int Update(DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public virtual int Delete(short Original_fuel_type_id, string Original_fuel_type_name, decimal Original_price) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((short)(Original_fuel_type_id));
            if ((Original_fuel_type_name == null)) {
                throw new ArgumentNullException("Original_fuel_type_name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_fuel_type_name));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_price));
            ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.DeleteCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
        public virtual int Insert(short fuel_type_id, string fuel_type_name, decimal price) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((short)(fuel_type_id));
            if ((fuel_type_name == null)) {
                throw new ArgumentNullException("fuel_type_name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(fuel_type_name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(price));
            ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.InsertCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(short fuel_type_id, string fuel_type_name, decimal price, short Original_fuel_type_id, string Original_fuel_type_name, decimal Original_price) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((short)(fuel_type_id));
            if ((fuel_type_name == null)) {
                throw new ArgumentNullException("fuel_type_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(fuel_type_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(price));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(Original_fuel_type_id));
            if ((Original_fuel_type_name == null)) {
                throw new ArgumentNullException("Original_fuel_type_name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_fuel_type_name));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_price));
            ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & ConnectionState.Open) 
                 != ConnectionState.Open)) {
                     this.Adapter.UpdateCommand.Connection.Open();
                 }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [HelpKeyword("vs.data.TableAdapter")]
        [DataObjectMethod(DataObjectMethodType.Update, true)]
        public virtual int Update(string fuel_type_name, decimal price, short Original_fuel_type_id, string Original_fuel_type_name, decimal Original_price) {
            return this.Update(Original_fuel_type_id, fuel_type_name, price, Original_fuel_type_id, Original_fuel_type_name, Original_price);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [DesignerCategory("code")]
    [ToolboxItem(true)]
    [Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
                                                     "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [HelpKeyword("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Car_ModelTableAdapter _car_ModelTableAdapter;
        
        private Car_TypeTableAdapter _car_TypeTableAdapter;
        
        private Fuel_TypeTableAdapter _fuel_TypeTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private IDbConnection _connection;
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
                                                       "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
                                                       "a", "System.Drawing.Design.UITypeEditor")]
        public Car_ModelTableAdapter Car_ModelTableAdapter {
            get {
                return this._car_ModelTableAdapter;
            }
            set {
                this._car_ModelTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
                                                       "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
                                                       "a", "System.Drawing.Design.UITypeEditor")]
        public Car_TypeTableAdapter Car_TypeTableAdapter {
            get {
                return this._car_TypeTableAdapter;
            }
            set {
                this._car_TypeTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
                                                       "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
                                                       "a", "System.Drawing.Design.UITypeEditor")]
        public Fuel_TypeTableAdapter Fuel_TypeTableAdapter {
            get {
                return this._fuel_TypeTableAdapter;
            }
            set {
                this._fuel_TypeTableAdapter = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._car_ModelTableAdapter != null) 
                     && (this._car_ModelTableAdapter.Connection != null))) {
                         return this._car_ModelTableAdapter.Connection;
                     }
                if (((this._car_TypeTableAdapter != null) 
                     && (this._car_TypeTableAdapter.Connection != null))) {
                         return this._car_TypeTableAdapter.Connection;
                     }
                if (((this._fuel_TypeTableAdapter != null) 
                     && (this._fuel_TypeTableAdapter.Connection != null))) {
                         return this._fuel_TypeTableAdapter.Connection;
                     }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._car_ModelTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._car_TypeTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fuel_TypeTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(FillingStation_DBDataSet dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._car_TypeTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Car_Type.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                     && (0 < updatedRows.Length))) {
                         result = (result + this._car_TypeTableAdapter.Update(updatedRows));
                         allChangedRows.AddRange(updatedRows);
                     }
            }
            if ((this._fuel_TypeTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Fuel_Type.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                     && (0 < updatedRows.Length))) {
                         result = (result + this._fuel_TypeTableAdapter.Update(updatedRows));
                         allChangedRows.AddRange(updatedRows);
                     }
            }
            if ((this._car_ModelTableAdapter != null)) {
                DataRow[] updatedRows = dataSet.Car_Model.Select(null, null, DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                     && (0 < updatedRows.Length))) {
                         result = (result + this._car_ModelTableAdapter.Update(updatedRows));
                         allChangedRows.AddRange(updatedRows);
                     }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(FillingStation_DBDataSet dataSet, List<DataRow> allAddedRows) {
            int result = 0;
            if ((this._car_TypeTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Car_Type.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                     && (0 < addedRows.Length))) {
                         result = (result + this._car_TypeTableAdapter.Update(addedRows));
                         allAddedRows.AddRange(addedRows);
                     }
            }
            if ((this._fuel_TypeTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Fuel_Type.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                     && (0 < addedRows.Length))) {
                         result = (result + this._fuel_TypeTableAdapter.Update(addedRows));
                         allAddedRows.AddRange(addedRows);
                     }
            }
            if ((this._car_ModelTableAdapter != null)) {
                DataRow[] addedRows = dataSet.Car_Model.Select(null, null, DataViewRowState.Added);
                if (((addedRows != null) 
                     && (0 < addedRows.Length))) {
                         result = (result + this._car_ModelTableAdapter.Update(addedRows));
                         allAddedRows.AddRange(addedRows);
                     }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(FillingStation_DBDataSet dataSet, List<DataRow> allChangedRows) {
            int result = 0;
            if ((this._car_ModelTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Car_Model.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                     && (0 < deletedRows.Length))) {
                         result = (result + this._car_ModelTableAdapter.Update(deletedRows));
                         allChangedRows.AddRange(deletedRows);
                     }
            }
            if ((this._fuel_TypeTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Fuel_Type.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                     && (0 < deletedRows.Length))) {
                         result = (result + this._fuel_TypeTableAdapter.Update(deletedRows));
                         allChangedRows.AddRange(deletedRows);
                     }
            }
            if ((this._car_TypeTableAdapter != null)) {
                DataRow[] deletedRows = dataSet.Car_Type.Select(null, null, DataViewRowState.Deleted);
                if (((deletedRows != null) 
                     && (0 < deletedRows.Length))) {
                         result = (result + this._car_TypeTableAdapter.Update(deletedRows));
                         allChangedRows.AddRange(deletedRows);
                     }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows) {
            if (((updatedRows == null) 
                 || (updatedRows.Length < 1))) {
                     return updatedRows;
                 }
            if (((allAddedRows == null) 
                 || (allAddedRows.Count < 1))) {
                     return updatedRows;
                 }
            List<DataRow> realUpdatedRows = new List<DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(FillingStation_DBDataSet dataSet) {
            if ((dataSet == null)) {
                throw new ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._car_ModelTableAdapter != null) 
                 && (this.MatchTableAdapterConnection(this._car_ModelTableAdapter.Connection) == false))) {
                     throw new ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                                                                "r, должны использовать одинаковую строку подключения.");
                 }
            if (((this._car_TypeTableAdapter != null) 
                 && (this.MatchTableAdapterConnection(this._car_TypeTableAdapter.Connection) == false))) {
                     throw new ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                                                                "r, должны использовать одинаковую строку подключения.");
                 }
            if (((this._fuel_TypeTableAdapter != null) 
                 && (this.MatchTableAdapterConnection(this._fuel_TypeTableAdapter.Connection) == false))) {
                     throw new ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                                                                "r, должны использовать одинаковую строку подключения.");
                 }
            IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                                                              "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & ConnectionState.Broken) 
                 == ConnectionState.Broken)) {
                     workConnection.Close();
                 }
            if ((workConnection.State == ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                                                              "и или текущее состояние не позволяет начать транзакцию.");
            }
            List<DataRow> allChangedRows = new List<DataRow>();
            List<DataRow> allAddedRows = new List<DataRow>();
            List<DataAdapter> adaptersWithAcceptChangesDuringUpdate = new List<DataAdapter>();
            Dictionary<object, IDbConnection> revertConnections = new Dictionary<object, IDbConnection>();
            int result = 0;
            DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._car_ModelTableAdapter != null)) {
                    revertConnections.Add(this._car_ModelTableAdapter, this._car_ModelTableAdapter.Connection);
                    this._car_ModelTableAdapter.Connection = ((OleDbConnection)(workConnection));
                    this._car_ModelTableAdapter.Transaction = ((OleDbTransaction)(workTransaction));
                    if (this._car_ModelTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._car_ModelTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._car_ModelTableAdapter.Adapter);
                    }
                }
                if ((this._car_TypeTableAdapter != null)) {
                    revertConnections.Add(this._car_TypeTableAdapter, this._car_TypeTableAdapter.Connection);
                    this._car_TypeTableAdapter.Connection = ((OleDbConnection)(workConnection));
                    this._car_TypeTableAdapter.Transaction = ((OleDbTransaction)(workTransaction));
                    if (this._car_TypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._car_TypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._car_TypeTableAdapter.Adapter);
                    }
                }
                if ((this._fuel_TypeTableAdapter != null)) {
                    revertConnections.Add(this._fuel_TypeTableAdapter, this._fuel_TypeTableAdapter.Connection);
                    this._fuel_TypeTableAdapter.Connection = ((OleDbConnection)(workConnection));
                    this._fuel_TypeTableAdapter.Transaction = ((OleDbTransaction)(workTransaction));
                    if (this._fuel_TypeTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fuel_TypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fuel_TypeTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    DataRow[] rows = new DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    DataRow[] rows = new DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        DataRow[] rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._car_ModelTableAdapter != null)) {
                    this._car_ModelTableAdapter.Connection = ((OleDbConnection)(revertConnections[this._car_ModelTableAdapter]));
                    this._car_ModelTableAdapter.Transaction = null;
                }
                if ((this._car_TypeTableAdapter != null)) {
                    this._car_TypeTableAdapter.Connection = ((OleDbConnection)(revertConnections[this._car_TypeTableAdapter]));
                    this._car_TypeTableAdapter.Transaction = null;
                }
                if ((this._fuel_TypeTableAdapter != null)) {
                    this._fuel_TypeTableAdapter.Connection = ((OleDbConnection)(revertConnections[this._fuel_TypeTableAdapter]));
                    this._fuel_TypeTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    DataAdapter[] adapters = new DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst) {
            Array.Sort<DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [DebuggerNonUserCode()]
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                 || (inputConnection == null))) {
                     return true;
                 }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, IComparer<DataRow> {
            
            private DataRelation _relation;
            
            private int _childFirst;
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private DataRow GetRoot(DataRow row, out int distance) {
                Debug.Assert((row != null));
                DataRow root = row;
                distance = 0;

                IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                traversedRows[row] = row;

                DataRow parent = row.GetParentRow(this._relation, DataRowVersion.Default);
                for (
                    ; ((parent != null) 
                       && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, DataRowVersion.Default);
                    }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, DataRowVersion.Original);
                    for (
                        ; ((parent != null) 
                           && (traversedRows.ContainsKey(parent) == false)); 
                        ) {
                            distance = (distance + 1);
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(this._relation, DataRowVersion.Original);
                        }
                }

                return root;
            }
            
            [DebuggerNonUserCode()]
            [GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(DataRow row1, DataRow row2) {
                if (ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                DataRow root2 = this.GetRoot(row2, out distance2);

                if (ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    Debug.Assert(((root1.Table != null) 
                                                             && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }

#pragma warning restore 1591
}